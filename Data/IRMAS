import os
import librosa
import numpy as np
import pandas as pd
from tqdm import tqdm # for progress tracking

#Extracting audio features using librosa.
def extract_audio_features(file_path, sr=22050): #filepath, librosa sampling rate

    try:
        #Load audio file
        y, sr = librosa.load(file_path, sr=sr)

        #Extract features
        features = {
            "mfcc_mean": np.mean(librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13), axis=1), #Mean of each MFCC (Mel-frequency cepstral coefficients); Captures timbre
            "spectral_centroid_mean": np.mean(librosa.feature.spectral_centroid(y=y, sr=sr)), #Perceived Brightness
            "spectral_bandwidth_mean": np.mean(librosa.feature.spectral_bandwidth(y=y, sr=sr)),
            "chroma_stft_mean": np.mean(librosa.feature.chroma_stft(y=y, sr=sr)), #Harmonic and pitch content
            "zero_crossing_rate_mean": np.mean(librosa.feature.zero_crossing_rate(y=y)),#Measures Noisiness
        }

        return features #Return dictionary of extracted features
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None

#Processes the IRMAS dataset to extract features foe each ausio file    
def process_dataset(dataset_path):
    data = [] #stores features and labels
    for label in os.listdir(dataset_path):
        label_path = os.path.join(dataset_path, label)
        if os.path.isdir(label_path): #Check if folder
            for file in tqdm(os.listdir(label_path), desc=f"Processing {label}"):
                file_path = os.path.join(label_path, file)
                if file_path.endswith(".wav"): #Process only .wav files
                    features = extract_audio_features(file_path)
                    if features:
                        #Add label and features to dataset
                        data.append({"label": label, **features})
    #Convert to Pandas Dataframe
    return pd.Dataframe(data)

#Path to my unzipped IRMAS dataset
dataset_path = "C:\Users\willi\VsCodeProjects\AI-Audio-Analysis-AI4ALL\Data\IRMAS-TrainingData"

#Process dataset
audio_features_df = process_dataset(dataset_path)

#Save features to a csv for future use
audio_features_df.to_csv("irmas_features.csv", index=false)

print("Feature extraction complete! Data saved to 'irmas_features.csv'.")